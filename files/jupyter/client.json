{
    "cells": [
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "from IPython.display import display, HTML\n",
       "\n",
       "import json\n",
       "with open('data.json') as f:\n",
       "    data = json.load(f)\n",
       "    \n",
       "try:\n",
       "    import snowflake.connector\n",
       "except ImportError as e:\n",
       "    !pip install --upgrade snowflake-connector-python\n",
       "    import snowflake.connector\n",
       "\n",
       "        \n",
       "warehouseName=data['warehouseName']\n",
       "widgetInstanceId=data['widgetInstanceId']\n",
       "outputTableName=\"modelOutput\" + str(widgetInstanceId)\n",
       "tableName=data['tableName']\n",
       "\n",
       "def _initConnection():\n",
       "    snowflakeUser=data['snowflakeUser']\n",
       "    snowflakePass=data['snowflakePass']\n",
       "    snowflakeAccount=data['snowflakeAccount']\n",
       "    \n",
       "    ctx = snowflake.connector.connect(\n",
       "        user=snowflakeUser,\n",
       "        password=snowflakePass,\n",
       "        account=snowflakeAccount\n",
       "        )\n",
       "    \n",
       "    return ctx;\n",
       "    \n",
       "def _queryInputSchema(ctx):\n",
       "    \n",
       "    cs = ctx.cursor()\n",
       "    try:\n",
       "        cs.execute('DESCRIBE TABLE \"'+warehouseName+'\".\"PUBLIC\".\"'+tableName+'\"')\n",
       "        data = cs.fetchall()\n",
       "        return data\n",
       "    finally:\n",
       "        cs.close()\n",
       "    return;\n",
       "\n",
       "def _queryInputData(ctx):    \n",
       "    cs = ctx.cursor()\n",
       "    try:\n",
       "        cs.execute('SELECT * FROM \"'+warehouseName+'\".\"PUBLIC\".\"'+tableName+'\"')\n",
       "        data = cs.fetchall()\n",
       "        return data\n",
       "    finally:\n",
       "        cs.close()\n",
       "    return;\n",
       "\n",
       "def _saveOutputSchema(ctx, schema):\n",
       "    cs = ctx.cursor()\n",
       "    try: \n",
       "        colnames = \", \".join (schema)\n",
       "        createStmt = 'CREATE OR REPLACE TABLE \"'+warehouseName+'\".\"PUBLIC\".\"'+outputTableName+'\" ('+colnames+')'\n",
       "        cs.execute(createStmt)\n",
       "        print(createStmt)\n",
       "    finally:\n",
       "        cs.close()\n",
       "    return;\n",
       "\n",
       "def _saveOutputData(ctx, data):\n",
       "    cs = ctx.cursor()\n",
       "    try: \n",
       "        value = \"\"\n",
       "        j = 0\n",
       "        values = []\n",
       "        while j < len(data):\n",
       "            value = \" (\"\n",
       "            value += \", \".join (\"'\"+str(v)+\"'\" for v in data[j])\n",
       "            value += \")\"\n",
       "            values.append(value)\n",
       "            j += 1   \n",
       "        insertsStmt = 'INSERT INTO \"'+warehouseName+'\".\"PUBLIC\".\"'+outputTableName+'\" values ' + \", \".join (values)        \n",
       "        cs.execute(insertsStmt)\n",
       "        print(insertsStmt)   \n",
       "    finally:\n",
       "        cs.close()\n",
       "    return;\n",
       "\n",
       "def notifyParent():\n",
       "    js = \"<script>parent.postMessage('onOutputCalled', '*')</script>\"\n",
       "    display(HTML(js))\n",
       "    return\n",
       "\n",
       "# should be public\n",
       "\n",
       "def getInputData():\n",
       "    ctx = _initConnection()\n",
       "    data = _queryInputData(ctx)\n",
       "    return json.dumps(data)\n",
       "\n",
       "def getInputSchema():\n",
       "    ctx = _initConnection()\n",
       "    data = _queryInputSchema(ctx)\n",
       "    columnNames= [column[0] for column in data]   \n",
       "    return columnNames\n",
       "\n",
       "def setOutputData(data):\n",
       "    ctx = _initConnection()\n",
       "    ret = _saveOutputData(ctx, data)\n",
       "    notifyParent()\n",
       "    return ret\n",
       "\n",
       "def setOutputSchema(schema):\n",
       "    ctx = _initConnection()\n",
       "    ret = _saveOutputSchema(ctx, schema)\n",
       "    return ret"
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
     }
    ],
    "metadata": {
     "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
     }
    },
    "nbformat": 4,
    "nbformat_minor": 4
   }
   